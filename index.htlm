<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Torneos de Pádel</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 10px;
            text-align: center;
        }

        .header p {
            color: #7f8c8d;
            text-align: center;
            font-size: 1.1em;
        }

        .nav-tabs {
            display: flex;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            margin-bottom: 30px;
            overflow: hidden;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .nav-tab {
            flex: 1;
            padding: 15px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
            border: none;
            background: transparent;
        }

        .nav-tab:hover {
            background: rgba(103, 126, 234, 0.1);
        }

        .nav-tab.active {
            background: #667eea;
            color: white;
        }

        .tab-content {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
        }

        .tab-content.active {
            display: block;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            margin-bottom: 5px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input,
        .form-group select {
            padding: 12px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 10px rgba(102, 126, 234, 0.3);
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a67d8;
            transform: translateY(-2px);
        }

        .btn-success {
            background: #48bb78;
            color: white;
        }

        .btn-success:hover {
            background: #38a169;
            transform: translateY(-2px);
        }

        .btn-warning {
            background: #ed8936;
            color: white;
        }

        .btn-warning:hover {
            background: #dd7724;
            transform: translateY(-2px);
        }

        .btn-danger {
            background: #e53e3e;
            color: white;
        }

        .btn-danger:hover {
            background: #c53030;
            transform: translateY(-2px);
        }

        .card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #667eea;
        }

        .team-card {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
            border-radius: 10px;
            margin-bottom: 15px;
            border: 1px solid #e2e8f0;
        }

        .team-info h3 {
            color: #2d3748;
            margin-bottom: 5px;
        }

        .team-info p {
            color: #718096;
            margin: 2px 0;
        }

        .points-display {
            background: #667eea;
            color: white;
            padding: 10px 15px;
            border-radius: 8px;
            font-weight: bold;
            text-align: center;
        }

        .challenge-form {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
        }

        .match-result {
            display: grid;
            grid-template-columns: 1fr auto 1fr;
            gap: 20px;
            align-items: center;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 15px;
        }

        .team-name {
            font-weight: bold;
            color: #2d3748;
        }

        .vs {
            font-size: 1.2em;
            font-weight: bold;
            color: #667eea;
        }

        .ranking-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .ranking-table th,
        .ranking-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .ranking-table th {
            background: #667eea;
            color: white;
            font-weight: 600;
        }

        .ranking-table tr:hover {
            background: #f7fafc;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .status-active {
            background: #c6f6d5;
            color: #276749;
        }

        .status-paused {
            background: #fed7d7;
            color: #742a2a;
        }

        .phase-indicator {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            display: inline-block;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .alert-success {
            background: #c6f6d5;
            color: #276749;
            border: 1px solid #9ae6b4;
        }

        .alert-warning {
            background: #feebc8;
            color: #744210;
            border: 1px solid #f6e05e;
        }

        @media (max-width: 768px) {
            .nav-tabs {
                flex-direction: column;
            }
            
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .match-result {
                grid-template-columns: 1fr;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🏓 Gestión de Torneos de Pádel</h1>
            <p>Sistema completo de gestión de jugadores, equipos y torneos</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="showTab('jugadores')">👥 Jugadores</button>
            <button class="nav-tab" onclick="showTab('equipos')">🤝 Equipos</button>
            <button class="nav-tab" onclick="showTab('enfrentamientos')">🏆 Enfrentamientos</button>
            <button class="nav-tab" onclick="showTab('retos')">🎯 Retos</button>
            <button class="nav-tab" onclick="showTab('rankings')">📊 Rankings</button>
        </div>

        <!-- Tab Jugadores -->
        <div id="jugadores" class="tab-content active">
            <h2>Gestión de Jugadores</h2>
            <div class="form-grid">
                <div class="form-group">
                    <label>Nombre</label>
                    <input type="text" id="playerName" placeholder="Nombre del jugador">
                </div>
                <div class="form-group">
                    <label>Apellidos</label>
                    <input type="text" id="playerSurname" placeholder="Apellidos">
                </div>
                <div class="form-group">
                    <label>Teléfono</label>
                    <input type="tel" id="playerPhone" placeholder="Teléfono">
                </div>
                <div class="form-group">
                    <label>Email</label>
                    <input type="email" id="playerEmail" placeholder="Email">
                </div>
                <div class="form-group">
                    <label>Posición</label>
                    <select id="playerPosition">
                        <option value="Derecha">Derecha</option>
                        <option value="Revés">Revés</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Lateralidad</label>
                    <select id="playerLaterality">
                        <option value="Diestro">Diestro</option>
                        <option value="Zurdo">Zurdo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Categoría</label>
                    <select id="playerCategory">
                        <option value="2ª">2ª</option>
                        <option value="3ª">3ª</option>
                        <option value="4ª">4ª</option>
                        <option value="5ª">5ª</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Estado</label>
                    <select id="playerStatus">
                        <option value="Activo">Activo</option>
                        <option value="Inactivo">Inactivo</option>
                        <option value="Pausado">Pausado</option>
                    </select>
                </div>
            </div>
            <button class="btn btn-primary" onclick="addPlayer()">Añadir Jugador</button>
            
            <div id="playersList" class="mt-4"></div>
        </div>

        <!-- Tab Equipos -->
        <div id="equipos" class="tab-content">
            <h2>Gestión de Equipos</h2>
            <div class="form-grid">
                <div class="form-group">
                    <label>Jugador 1</label>
                    <select id="player1Select">
                        <option value="">Seleccionar jugador</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Jugador 2</label>
                    <select id="player2Select">
                        <option value="">Seleccionar jugador</option>
                    </select>
                </div>
            </div>
            <button class="btn btn-success" onclick="createTeam()">Crear Equipo</button>
            
            <div id="teamsList" class="mt-4"></div>
        </div>

        <!-- Tab Enfrentamientos -->
        <div id="enfrentamientos" class="tab-content">
            <h2>Enfrentamientos por Categoría</h2>
            <div class="phase-indicator">FASE 1: Round Robin por Categorías</div>
            
            <div class="form-grid">
                <div class="form-group">
                    <label>Equipo 1</label>
                    <select id="team1Select">
                        <option value="">Seleccionar equipo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Equipo 2</label>
                    <select id="team2Select">
                        <option value="">Seleccionar equipo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Resultado</label>
                    <select id="matchResult">
                        <option value="2-0">Victoria 2-0</option>
                        <option value="2-1">Victoria 2-1</option>
                        <option value="6-0">Victoria 6-0 6-0</option>
                    </select>
                </div>
            </div>
            <button class="btn btn-primary" onclick="recordMatch()">Registrar Resultado</button>
            
            <div id="matchesList" class="mt-4"></div>
        </div>

        <!-- Tab Retos -->
        <div id="retos" class="tab-content">
            <h2>Sistema de Retos</h2>
            <div class="phase-indicator">FASE 2: Retos por Ranking</div>
            
            <div class="alert alert-warning">
                <strong>Reglas de Retos:</strong>
                <ul>
                    <li>Solo se puede retar al equipo inmediatamente superior</li>
                    <li>Máximo un reto por semana</li>
                    <li>Si pierdes, esperas 2 semanas para retar de nuevo</li>
                    <li>El reto debe jugarse en 7 días</li>
                </ul>
            </div>
            
            <div class="challenge-form">
                <h3>Nuevo Reto</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label>Equipo Retador</label>
                        <select id="challengerTeam">
                            <option value="">Seleccionar equipo</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Equipo Retado</label>
                        <select id="challengedTeam">
                            <option value="">Se selecciona automáticamente</option>
                        </select>
                    </div>
                </div>
                <button class="btn btn-warning" onclick="createChallenge()">Crear Reto</button>
            </div>
            
            <div id="challengesList" class="mt-4"></div>
        </div>

        <!-- Tab Rankings -->
        <div id="rankings" class="tab-content">
            <h2>Rankings por Categoría</h2>
            
            <div class="form-group" style="max-width: 200px;">
                <label>Filtrar por Categoría</label>
                <select id="categoryFilter" onchange="updateRankings()">
                    <option value="all">Todas las categorías</option>
                    <option value="2ª">2ª</option>
                    <option value="3ª">3ª</option>
                    <option value="4ª">4ª</option>
                    <option value="5ª">5ª</option>
                </select>
            </div>
            
            <table class="ranking-table">
                <thead>
                    <tr>
                        <th>Pos.</th>
                        <th>Equipo</th>
                        <th>Categoría</th>
                        <th>Puntos</th>
                        <th>Estado</th>
                    </tr>
                </thead>
                <tbody id="rankingTableBody">
                </tbody>
            </table>
            
            <div style="margin-top: 20px;">
                <button class="btn btn-primary" onclick="printRankings()">🖨️ Imprimir Rankings</button>
            </div>
        </div>
    </div>

    <script>
        // Datos globales
        let players = [];
        let teams = [];
        let matches = [];
        let challenges = [];

        // Función para cambiar entre tabs
        function showTab(tabName) {
            // Ocultar todos los tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remover clase active de todos los botones
            document.querySelectorAll('.nav-tab').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Mostrar tab seleccionado
            document.getElementById(tabName).classList.add('active');
            
            // Activar botón correspondiente
            event.target.classList.add('active');
            
            // Actualizar contenido si es necesario
            if (tabName === 'equipos') {
                updatePlayerSelects();
            } else if (tabName === 'enfrentamientos') {
                updateTeamSelects();
            } else if (tabName === 'retos') {
                updateChallengeSelects();
            } else if (tabName === 'rankings') {
                updateRankings();
            }
        }

        // Función para añadir jugador
        function addPlayer() {
            const player = {
                id: Date.now(),
                name: document.getElementById('playerName').value,
                surname: document.getElementById('playerSurname').value,
                phone: document.getElementById('playerPhone').value,
                email: document.getElementById('playerEmail').value,
                position: document.getElementById('playerPosition').value,
                laterality: document.getElementById('playerLaterality').value,
                category: document.getElementById('playerCategory').value,
                points: 1000,
                status: document.getElementById('playerStatus').value,
                teamId: null
            };

            if (!player.name || !player.surname) {
                alert('Por favor, completa al menos el nombre y apellidos');
                return;
            }

            players.push(player);
            updatePlayersList();
            clearPlayerForm();
        }

        // Función para actualizar lista de jugadores
        function updatePlayersList() {
            const container = document.getElementById('playersList');
            container.innerHTML = '<h3>Jugadores Registrados</h3>';

            players.forEach(player => {
                const playerCard = document.createElement('div');
                playerCard.className = 'card';
                playerCard.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4>${player.name} ${player.surname}</h4>
                            <p><strong>Categoría:</strong> ${player.category} | <strong>Posición:</strong> ${player.position} | <strong>Puntos:</strong> ${player.points}</p>
                            <p><strong>Teléfono:</strong> ${player.phone} | <strong>Email:</strong> ${player.email}</p>
                        </div>
                        <div>
                            <span class="status-badge ${player.status === 'Activo' ? 'status-active' : 'status-paused'}">${player.status}</span>
                            <button class="btn btn-danger" onclick="removePlayer(${player.id})">Eliminar</button>
                        </div>
                    </div>
                `;
                container.appendChild(playerCard);
            });
        }

        // Función para crear equipo
        function createTeam() {
            const player1Id = parseInt(document.getElementById('player1Select').value);
            const player2Id = parseInt(document.getElementById('player2Select').value);

            if (!player1Id || !player2Id) {
                alert('Por favor, selecciona ambos jugadores');
                return;
            }

            if (player1Id === player2Id) {
                alert('No puedes seleccionar el mismo jugador dos veces');
                return;
            }

            const player1 = players.find(p => p.id === player1Id);
            const player2 = players.find(p => p.id === player2Id);

            if (player1.category !== player2.category) {
                alert('Los jugadores deben ser de la misma categoría');
                return;
            }

            if (player1.teamId || player2.teamId) {
                alert('Uno de los jugadores ya está en un equipo');
                return;
            }

            const team = {
                id: Date.now(),
                player1Id: player1Id,
                player2Id: player2Id,
                category: player1.category,
                points: 1000,
                status: 'Activo'
            };

            teams.push(team);
            
            // Actualizar jugadores con el ID del equipo
            player1.teamId = team.id;
            player2.teamId = team.id;

            updateTeamsList();
            updatePlayerSelects();
        }

        // Función para actualizar lista de equipos
        function updateTeamsList() {
            const container = document.getElementById('teamsList');
            container.innerHTML = '<h3>Equipos Formados</h3>';

            teams.forEach(team => {
                const player1 = players.find(p => p.id === team.player1Id);
                const player2 = players.find(p => p.id === team.player2Id);

                const teamCard = document.createElement('div');
                teamCard.className = 'team-card';
                teamCard.innerHTML = `
                    <div class="team-info">
                        <h3>${player1.name} ${player1.surname} & ${player2.name} ${player2.surname}</h3>
                        <p><strong>Categoría:</strong> ${team.category}</p>
                        <p><strong>Posiciones:</strong> ${player1.position} / ${player2.position}</p>
                    </div>
                    <div class="points-display">
                        ${team.points} pts
                    </div>
                `;
                container.appendChild(teamCard);
            });
        }

        // Función para actualizar selects de jugadores
        function updatePlayerSelects() {
            const player1Select = document.getElementById('player1Select');
            const player2Select = document.getElementById('player2Select');

            // Limpiar selects
            player1Select.innerHTML = '<option value="">Seleccionar jugador</option>';
            player2Select.innerHTML = '<option value="">Seleccionar jugador</option>';

            // Añadir jugadores disponibles (sin equipo)
            players.filter(p => !p.teamId && p.status === 'Activo').forEach(player => {
                const option1 = document.createElement('option');
                option1.value = player.id;
                option1.textContent = `${player.name} ${player.surname} (${player.category})`;
                player1Select.appendChild(option1);

                const option2 = document.createElement('option');
                option2.value = player.id;
                option2.textContent = `${player.name} ${player.surname} (${player.category})`;
                player2Select.appendChild(option2);
            });
        }

        // Función para actualizar selects de equipos
        function updateTeamSelects() {
            const team1Select = document.getElementById('team1Select');
            const team2Select = document.getElementById('team2Select');

            team1Select.innerHTML = '<option value="">Seleccionar equipo</option>';
            team2Select.innerHTML = '<option value="">Seleccionar equipo</option>';

            teams.forEach(team => {
                const player1 = players.find(p => p.id === team.player1Id);
                const player2 = players.find(p => p.id === team.player2Id);
                const teamName = `${player1.name} & ${player2.name} (${team.category})`;

                const option1 = document.createElement('option');
                option1.value = team.id;
                option1.textContent = teamName;
                team1Select.appendChild(option1);

                const option2 = document.createElement('option');
                option2.value = team.id;
                option2.textContent = teamName;
                team2Select.appendChild(option2);
            });
        }

        // Función para registrar resultado de partido
        function recordMatch() {
            const team1Id = parseInt(document.getElementById('team1Select').value);
            const team2Id = parseInt(document.getElementById('team2Select').value);
            const result = document.getElementById('matchResult').value;

            if (!team1Id || !team2Id) {
                alert('Por favor, selecciona ambos equipos');
                return;
            }

            if (team1Id === team2Id) {
                alert('No puedes enfrentar un equipo consigo mismo');
                return;
            }

            const team1 = teams.find(t => t.id === team1Id);
            const team2 = teams.find(t => t.id === team2Id);

            if (team1.category !== team2.category) {
                alert('Los equipos deben ser de la misma categoría');
                return;
            }

            // Aplicar puntuación según el resultado
            let pointsWinner, pointsLoser;
            switch (result) {
                case '2-0':
                    pointsWinner = 500;
                    pointsLoser = -100;
                    break;
                case '2-1':
                    pointsWinner = 250;
                    pointsLoser = 100;
                    break;
                case '6-0':
                    pointsWinner = 1000;
                    pointsLoser = -500;
                    break;
            }

            team1.points += pointsWinner;
            team2.points += pointsLoser;

            // Asegurar que los puntos no sean negativos
            team1.points = Math.max(0, team1.points);
            team2.points = Math.max(0, team2.points);

            const match = {
                id: Date.now(),
                team1Id: team1Id,
                team2Id: team2Id,
                result: result,
                winnerId: team1Id,
                date: new Date().toLocaleDateString()
            };

            matches.push(match);
            updateMatchesList();
            updateTeamsList();
        }

        // Función para actualizar lista de partidos
        function updateMatchesList() {
            const container = document.getElementById('matchesList');
            container.innerHTML = '<h3>Resultados de Partidos</h3>';

            matches.forEach(match => {
                const team1 = teams.find(t => t.id === match.team1Id);
                const team2 = teams.find(t => t.id === match.team2Id);
                const player1_1 = players.find(p => p.id === team1.player1Id);
                const player1_2 = players.find(p => p.id === team1.player2Id);
                const player2_1 = players.find(p => p.id === team2.player1Id);
                const player2_2 = players.find(p => p.id === team2.player2Id);

                const matchCard = document.createElement('div');
                matchCard.className = 'match-result';
                matchCard.innerHTML = `
                    <div class="team-name">${player1_1.name} & ${player1_2.name}</div>
                    <div class="vs">${match.result}</div>
                    <div class="team-name">${player2_1.name} & ${player2_2.name}</div>
                `;
                container.appendChild(matchCard);
            });
        }

        // Función para actualizar rankings
        function updateRankings() {
            const category = document.getElementById('categoryFilter').value;
            const tbody = document.getElementById('rankingTableBody');
            
            let filteredTeams = teams;
            if (category !== 'all') {
                filteredTeams = teams.filter(team => team.category === category);
            }

            // Ordenar por puntos
            filteredTeams.sort((a, b) => b.points - a.points);

            tbody.innerHTML = '';
            filteredTeams.forEach((team, index) => {
                const player1 = players.find(p => p.id === team.player1Id);
                const player2 = players.find(p => p.id === team.player2Id);

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${player1.name} ${player1.surname} & ${player2.name} ${player2.surname}</td>
                    <td>${team.category}</td>
                    <td><strong>${team.points}</strong></td>
                    <td><span class="status-badge ${team.status === 'Activo' ? 'status-active' : 'status-paused'}">${team.status}</span></td>
                `;
                tbody.appendChild(row);
            });
        }

        // Función para actualizar selects de retos
        function updateChallengeSelects() {
            const challengerSelect = document.getElementById('challengerTeam');
            const challengedSelect = document.getElementById('challengedTeam');

            challengerSelect.innerHTML = '<option value="">Seleccionar equipo</option>';
            challengedSelect.innerHTML = '<option value="">Se selecciona automáticamente</option>';

            teams.forEach(team => {
                const player1 = players.find(p => p.id === team.player1Id);
                const player2 = players.find(p => p.id === team.player2Id);
                const teamName = `${player1.name} & ${player2.name} (${team.category})`;

                const option = document.createElement('option');
                option.value = team.id;
                option.textContent = teamName;
                challengerSelect.appendChild(option);
            });

            // Actualizar equipo retado automáticamente
            challengerSelect.addEventListener('change', function() {
                const challengerId = parseInt(this.value);
                if (!challengerId) return;

                const challengerTeam = teams.find(t => t.id === challengerId);
                const sameCategory = teams.filter(t => t.category === challengerTeam.category);
                
                // Ordenar por puntos para encontrar el inmediatamente superior
                sameCategory.sort((a, b) => b.points - a.points);
                
                const challengerIndex = sameCategory.findIndex(t => t.id === challengerId);
                if (challengerIndex > 0) {
                    const challengedTeam = sameCategory[challengerIndex - 1];
                    const player1 = players.find(p => p.id === challengedTeam.player1Id);
                    const player2 = players.find(p => p.id === challengedTeam.player2Id);
                    
                    challengedSelect.innerHTML = `<option value="${challengedTeam.id}">${player1.name} & ${player2.name}</option>`;
                } else {
                    challengedSelect.innerHTML = '<option value="">Este equipo ya es el primero</option>';
                }
            });
        }

        // Función para crear reto
        function createChallenge() {
            const challengerId = parseInt(document.getElementById('challengerTeam').value);
            const challengedId = parseInt(document.getElementById('challengedTeam').value);

            if (!challengerId || !challengedId) {
                alert('Por favor, selecciona ambos equipos');
                return;
            }

            const challenge = {
                id: Date.now(),
                challengerId: challengerId,
                challengedId: challengedId,
                date: new Date().toLocaleDateString(),
                status: 'Pendiente',
                deadline: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()
            };

            challenges.push(challenge);
            updateChallengesList();
        }

        // Función para actualizar lista de retos
        function updateChallengesList() {
            const container = document.getElementById('challengesList');
            container.innerHTML = '<h3>Retos Activos</h3>';

            if (challenges.length === 0) {
                container.innerHTML += '<p>No hay retos activos</p>';
                return;
            }

            challenges.forEach(challenge => {
                const challengerTeam = teams.find(t => t.id === challenge.challengerId);
                const challengedTeam = teams.find(t => t.id === challenge.challengedId);
                
                const challengerPlayer1 = players.find(p => p.id === challengerTeam.player1Id);
                const challengerPlayer2 = players.find(p => p.id === challengerTeam.player2Id);
                const challengedPlayer1 = players.find(p => p.id === challengedTeam.player1Id);
                const challengedPlayer2 = players.find(p => p.id === challengedTeam.player2Id);

                const challengeCard = document.createElement('div');
                challengeCard.className = 'card';
                challengeCard.innerHTML = `
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4>🥊 ${challengerPlayer1.name} & ${challengerPlayer2.name}</h4>
                            <p><strong>Reta a:</strong> ${challengedPlayer1.name} & ${challengedPlayer2.name}</p>
                            <p><strong>Fecha límite:</strong> ${challenge.deadline}</p>
                        </div>
                        <div style="display: flex; flex-direction: column; gap: 10px;">
                            <span class="status-badge status-active">${challenge.status}</span>
                            <div style="display: flex; gap: 10px; align-items: center;">
                                <select id="challengeResult_${challenge.id}" style="padding: 8px; border-radius: 5px; border: 1px solid #ddd;">
                                    <option value="">Seleccionar resultado</option>
                                    <option value="2-0">Victoria 2-0</option>
                                    <option value="2-1">Victoria 2-1</option>
                                    <option value="6-0">Victoria 6-0 6-0</option>
                                </select>
                                <select id="challengeWinner_${challenge.id}" style="padding: 8px; border-radius: 5px; border: 1px solid #ddd;">
                                    <option value="">¿Quién ganó?</option>
                                    <option value="challenger">Retador</option>
                                    <option value="challenged">Retado</option>
                                </select>
                                <button class="btn btn-success" onclick="resolveChallenge(${challenge.id})">Resolver Reto</button>
                            </div>
                        </div>
                    </div>
                `;
                container.appendChild(challengeCard);
            });
        }

        // Función para resolver reto
        function resolveChallenge(challengeId) {
            const challenge = challenges.find(c => c.id === challengeId);
            if (!challenge) return;

            const result = document.getElementById(`challengeResult_${challengeId}`).value;
            const winner = document.getElementById(`challengeWinner_${challengeId}`).value;

            if (!result || !winner) {
                alert('Por favor, selecciona tanto el resultado como el ganador');
                return;
            }

            const challengerTeam = teams.find(t => t.id === challenge.challengerId);
            const challengedTeam = teams.find(t => t.id === challenge.challengedId);

            // Aplicar puntuación según el resultado
            let pointsWinner, pointsLoser;
            switch (result) {
                case '2-0':
                    pointsWinner = 500;
                    pointsLoser = -100;
                    break;
                case '2-1':
                    pointsWinner = 250;
                    pointsLoser = 100;
                    break;
                case '6-0':
                    pointsWinner = 1000;
                    pointsLoser = -500;
                    break;
            }

            if (winner === 'challenger') {
                // El retador gana
                challengerTeam.points += pointsWinner;
                challengedTeam.points += pointsLoser;
                
                // Intercambiar posiciones si el retador supera al retado
                if (challengerTeam.points > challengedTeam.points) {
                    const tempPoints = challengerTeam.points;
                    challengerTeam.points = challengedTeam.points;
                    challengedTeam.points = tempPoints;
                    alert(`¡El equipo retador ha ganado ${result} y ha intercambiado posiciones!`);
                } else {
                    alert(`¡El equipo retador ha ganado ${result} pero no ha superado en puntos al retado!`);
                }
            } else {
                // El retado gana
                challengedTeam.points += pointsWinner;
                challengerTeam.points += pointsLoser;
                alert(`El equipo retado ha ganado ${result} y mantiene su posición`);
            }

            // Asegurar que los puntos no sean negativos
            challengerTeam.points = Math.max(0, challengerTeam.points);
            challengedTeam.points = Math.max(0, challengedTeam.points);

            // Remover el reto de la lista
            const index = challenges.findIndex(c => c.id === challengeId);
            challenges.splice(index, 1);

            updateChallengesList();
            updateRankings();
            updateTeamsList();
        }

        // Función para eliminar jugador
        function removePlayer(playerId) {
            if (confirm('¿Estás seguro de que quieres eliminar este jugador?')) {
                const playerIndex = players.findIndex(p => p.id === playerId);
                if (playerIndex > -1) {
                    players.splice(playerIndex, 1);
                    updatePlayersList();
                    updatePlayerSelects();
                }
            }
        }

        // Función para limpiar formulario de jugador
        function clearPlayerForm() {
            document.getElementById('playerName').value = '';
            document.getElementById('playerSurname').value = '';
            document.getElementById('playerPhone').value = '';
            document.getElementById('playerEmail').value = '';
            document.getElementById('playerPosition').value = 'Derecha';
            document.getElementById('playerLaterality').value = 'Diestro';
            document.getElementById('playerCategory').value = '2ª';
            document.getElementById('playerStatus').value = 'Activo';
        }

        // Función para imprimir rankings
        function printRankings() {
            const printWindow = window.open('', '_blank');
            const category = document.getElementById('categoryFilter').value;
            const categoryText = category === 'all' ? 'Todas las categorías' : `Categoría ${category}`;
            
            let filteredTeams = teams;
            if (category !== 'all') {
                filteredTeams = teams.filter(team => team.category === category);
            }
            filteredTeams.sort((a, b) => b.points - a.points);

            let tableHTML = `
                <html>
                <head>
                    <title>Ranking de Pádel - ${categoryText}</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        h1 { color: #333; text-align: center; }
                        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
                        th { background-color: #667eea; color: white; }
                        tr:nth-child(even) { background-color: #f2f2f2; }
                        .date { text-align: center; margin-top: 20px; color: #666; }
                    </style>
                </head>
                <body>
                    <h1>🏓 Ranking de Pádel - ${categoryText}</h1>
                    <table>
                        <thead>
                            <tr>
                                <th>Posición</th>
                                <th>Equipo</th>
                                <th>Categoría</th>
                                <th>Puntos</th>
                                <th>Estado</th>
                            </tr>
                        </thead>
                        <tbody>
            `;

            filteredTeams.forEach((team, index) => {
                const player1 = players.find(p => p.id === team.player1Id);
                const player2 = players.find(p => p.id === team.player2Id);
                
                tableHTML += `
                    <tr>
                        <td>${index + 1}</td>
                        <td>${player1.name} ${player1.surname} & ${player2.name} ${player2.surname}</td>
                        <td>${team.category}</td>
                        <td><strong>${team.points}</strong></td>
                        <td>${team.status}</td>
                    </tr>
                `;
            });

            tableHTML += `
                        </tbody>
                    </table>
                    <div class="date">Generado el: ${new Date().toLocaleDateString()}</div>
                </body>
                </html>
            `;

            printWindow.document.write(tableHTML);
            printWindow.document.close();
            printWindow.print();
        }

        // Datos de ejemplo para demostración
        function loadSampleData() {
            // Jugadores de ejemplo
            const samplePlayers = [
                {id: 1, name: 'Carlos', surname: 'García', phone: '123456789', email: 'carlos@email.com', position: 'Derecha', laterality: 'Diestro', category: '3ª', points: 1200, status: 'Activo', teamId: null},
                {id: 2, name: 'Ana', surname: 'López', phone: '987654321', email: 'ana@email.com', position: 'Revés', laterality: 'Diestra', category: '3ª', points: 1150, status: 'Activo', teamId: null},
                {id: 3, name: 'Miguel', surname: 'Rodríguez', phone: '555666777', email: 'miguel@email.com', position: 'Derecha', laterality: 'Diestro', category: '4ª', points: 1000, status: 'Activo', teamId: null},
                {id: 4, name: 'Laura', surname: 'Martín', phone: '333222111', email: 'laura@email.com', position: 'Revés', laterality: 'Zurda', category: '4ª', points: 950, status: 'Activo', teamId: null},
                {id: 5, name: 'Pedro', surname: 'Sánchez', phone: '111222333', email: 'pedro@email.com', position: 'Derecha', laterality: 'Diestro', category: '3ª', points: 1100, status: 'Activo', teamId: null},
                {id: 6, name: 'María', surname: 'Fernández', phone: '444555666', email: 'maria@email.com', position: 'Revés', laterality: 'Diestra', category: '3ª', points: 1050, status: 'Activo', teamId: null}
            ];

            players.push(...samplePlayers);
            updatePlayersList();
            updatePlayerSelects();
        }

        // Cargar datos de ejemplo al iniciar
        loadSampleData();

        // Mostrar alerta de bienvenida
        setTimeout(() => {
            alert('¡Bienvenido al Sistema de Gestión de Torneos de Pádel!\n\nEste es un prototipo funcional que incluye:\n✅ Gestión de jugadores y equipos\n✅ Sistema de enfrentamientos\n✅ Retos por ranking\n✅ Rankings dinámicos\n\nHe cargado algunos jugadores de ejemplo para que puedas probar la funcionalidad.');
        }, 1000);
    </script>
</body>
</html>
